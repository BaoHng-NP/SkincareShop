@page
@model SkincareProductSalesSystem.Pages.Customer.OrderHistoryModel

@{
    ViewData["Title"] = "Order History";
}

<style>
    .nav-tabs .nav-link {
        color: black !important; 
    }

        .nav-tabs .nav-link:hover {
            color: #333 !important;
        }
        .nav-tabs .nav-link.active {
            color: #f6f7f6 !important; 
            background-color: #616e5e !important; 
            border-color: #616e5e !important; 
        }

    .toast-message {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #28a745; /* Màu xanh thành công */
        color: white;
        padding: 15px;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
        z-index: 1000;
    }

        .toast-message.show {
            opacity: 1;
        }

</style>

<div class="container mt-4 text-center mb-5">
    <h1 class="mb-4">Order History</h1>

    <!-- Tabs -->
    <ul class="nav nav-tabs d-flex justify-content-center" id="orderTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#allOrders" type="button" role="tab">All</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pendingOrders" type="button" role="tab">Pending</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="confirmed-tab" data-bs-toggle="tab" data-bs-target="#confirmedOrders" type="button" role="tab">Confirmed</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="shipping-tab" data-bs-toggle="tab" data-bs-target="#shippingOrders" type="button" role="tab">Shipping</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="completed-tab" data-bs-toggle="tab" data-bs-target="#completedOrders" type="button" role="tab">Completed</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="canceled-tab" data-bs-toggle="tab" data-bs-target="#canceledOrders" type="button" role="tab">Canceled</button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3 text-center" id="orderTabsContent">
        <div class="tab-pane fade show active" id="allOrders" role="tabpanel">
            @await Html.PartialAsync("_OrderTable", Model.Order)
        </div>
        <div class="tab-pane fade" id="pendingOrders" role="tabpanel">
            @await Html.PartialAsync("_OrderTable", Model.Order.Where(o => o.Status == "Pending").ToList())
        </div>
        <div class="tab-pane fade" id="confirmedOrders" role="tabpanel">
            @await Html.PartialAsync("_OrderTable", Model.Order.Where(o => o.Status == "Confirmed").ToList())
        </div>
        <div class="tab-pane fade" id="shippingOrders" role="tabpanel">
            @await Html.PartialAsync("_OrderTable", Model.Order.Where(o => o.Status == "Shipping" || o.Status == "Delivered").ToList())
        </div>
        <div class="tab-pane fade" id="completedOrders" role="tabpanel">
            @await Html.PartialAsync("_OrderTable", Model.Order
                     .Where(o => o.Status == "Completed-NonFeedback" || o.Status == "Completed-Feedback")
                     .ToList())
        </div>
        <div class="tab-pane fade" id="canceledOrders" role="tabpanel">
            @await Html.PartialAsync("_OrderTable", Model.Order.Where(o => o.Status == "Canceled").ToList())
        </div>
    </div>
</div>
@if (TempData["SuccessMessage"] != null)
{
    <div id="toast" class="toast-message">
        @TempData["SuccessMessage"]
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var toast = document.getElementById("toast");
            toast.classList.add("show");
            setTimeout(function () {
                toast.classList.remove("show");
            }, 3000); // Ẩn sau 3 giây
        });
    </script>
}
<script>localStorage.removeItem("selectedVoucherId");</script>
<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script src="~/js/site.js"></script>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            const statusElements = document.querySelectorAll('[id^="status-"]');

            statusElements.forEach(element => {
                const status = element.getAttribute('data-status');
                const deliveredDateStr = element.getAttribute('data-delivered-date');


                if (status === 'Delivered' && deliveredDateStr) {
                    const deliveredDate = new Date(deliveredDateStr);
                    const currentDate = new Date();
                    const diffDays = (currentDate - deliveredDate) / (1000 * 60 * 60 * 24);


                    if (diffDays > 2) {
                        const orderId = element.id.split('-')[1];
                        console.log(`Updating order ${orderId}...`);
                        updateOrderStatus(orderId);
                    }
                }
            });

            function updateOrderStatus(orderId) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                if (!token) {
                    console.error("CSRF token missing!");
                    return;
                }

                console.log(`Sending request for order ${orderId}...`);

                fetch(`/Customer/OrderHistory?handler=AutoComplete&id=${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    }
                })
                .then(response => {
                    console.log("Response status:", response.status);
                    return response.json();
                })
                .then(data => {
                    console.log("Response data:", data);
                    if (data.success) {
                        const statusElement = document.getElementById(`status-${orderId}`);
                        if (statusElement) {
                            statusElement.textContent = 'Completed';
                            statusElement.className = 'badge bg-success';
                            statusElement.setAttribute('data-status', 'Completed-NonFeedback');
                        }
                        window.location.reload();
                    }
                })
                .catch(error => {
                    console.error("Fetch error:", error);
                });
            }
        });
    </script>
}